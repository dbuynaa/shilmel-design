generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_PRISMA_URL") // uses connection pooling
    directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String
    role          UserRole  @default(USER)
    image         String?
    posts         Post[]
    order         Order[]
}

enum UserRole {
    USER
    ADMIN
}

model Product {
    id            String            @id @default(cuid())
    name          String
    description   String?
    price         Int
    discount      Int?
    materials     ProductMaterial[]
    customization Customization?
    sizes         SizeQuantity[]
    imageColor    ImageColor[]
    category      Category          @relation(fields: [categoryId], references: [id])
    categoryId    String

    orderItems OrderItem[]
    cartItems  CartItem[]

    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    WorkBranch   WorkBranch? @relation(fields: [workBranchId], references: [id])
    workBranchId String?
}

model ImageColor {
    id        String   @id @default(cuid())
    color     String
    image     String[]
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Customization {
    id          String @id @default(cuid())
    orderNumber String @unique

    logoPosition String?
    logoFile     String?
    notes        String?

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductMaterial {
    id        String  @id @default(cuid())
    material  String
    productId String
    product   Product @relation(fields: [productId], references: [id])
}

model SizeQuantity {
    id        String   @id @default(cuid())
    size      String
    stock     Int
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([productId, size])
}

model WorkBranch {
    id          String    @id @default(cuid())
    name        String
    description String?
    icon        String
    products    Product[]

    parentId  String?
    parent    WorkBranch?  @relation("SubWorkBranches", fields: [parentId], references: [id])
    children  WorkBranch[] @relation("SubWorkBranches")
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

model Category {
    id   String @id @default(cuid())
    name String @unique
    icon String

    products Product[]
}

model Cart {
    id        String     @id @default(cuid())
    userId    String
    items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model CartItem {
    id        String   @id @default(cuid())
    cartId    String
    productId String?
    quantity  Int
    size      String
    color     String
    cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([cartId, productId, size, color])
}

model Order {
    id            String      @id @default(cuid())
    status        OrderStatus @default(PENDING)
    items         OrderItem[]
    totalAmount   Int
    paymentMethod String      @default("card") // 'card' | 'qpay'
    paymentStatus String      @default("PENDING") // 'PENDING' | 'PAID' | 'FAILED'
    paymentId     String?

    userId    String
    orderedBy User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrderItem {
    id        String   @id @default(cuid())
    quantity  Int
    size      String
    color     String
    price     Int
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String
    product   Product  @relation(fields: [productId], references: [id])
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

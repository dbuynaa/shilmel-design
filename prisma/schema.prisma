// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_PRISMA_URL") // uses connection pooling
    directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    password      String
    role          UserRole      @default(USER)
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    order         Order[]
    customOrders  CustomOrder[]
}

enum UserRole {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id          String        @id @default(cuid())
    name        String
    description String?
    price       Int
    discount    Int?
    images      String[]
    colors      String[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    category    Category      @relation(fields: [categoryId], references: [id])
    categoryId  String
    orderItems  OrderItem[]
    cartItems   CartItem[]
    sizes       ProductSize[]
}

model ProductSize {
    id        String   @id @default(cuid())
    size      String
    stock     Int
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([productId, size])
}

model WorkBranch {
    id             String           @id @default(cuid())
    name           String
    description    String?
    icon           String
    parentId       String?
    parent         WorkBranch?      @relation("SubWorkBranches", fields: [parentId], references: [id])
    children       WorkBranch[]     @relation("SubWorkBranches")
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    customOrders   CustomOrder[]
    customCartItem CustomCartItem[]
}

model Category {
    id   String @id @default(cuid())
    name String @unique
    icon String

    products        Product[]
    customOrders    CustomOrder[]
    customCartItems CustomCartItem[]
}

model Cart {
    id              String           @id @default(cuid())
    userId          String
    items           CartItem[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    customCartItems CustomCartItem[]
}

model CartItem {
    id        String   @id @default(cuid())
    cartId    String
    productId String?
    quantity  Int
    size      String
    color     String
    cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([cartId, productId, size, color])
}

model CustomCartItem {
    id           String         @id @default(cuid())
    cartId       String
    totalAmount  Int
    sizes        SizeQuantity[]
    color        String?
    material     String // "standard" | "premium"
    logoPosition String?
    logoFile     String?
    notes        String?

    category     Category   @relation(fields: [categoryId], references: [id])
    categoryId   String
    workBranch   WorkBranch @relation(fields: [workBranchId], references: [id])
    workBranchId String
    cart         Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Order {
    id            String      @id @default(cuid())
    status        OrderStatus @default(PENDING)
    items         OrderItem[]
    totalAmount   Int
    paymentMethod String      @default("card") // 'card' | 'qpay'
    paymentStatus String      @default("PENDING") // 'PENDING' | 'PAID' | 'FAILED'
    paymentId     String? // External payment reference ID

    userId    String
    orderedBy User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrderItem {
    id        String   @id @default(cuid())
    quantity  Int
    size      String
    color     String
    price     Int
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String
    product   Product  @relation(fields: [productId], references: [id])
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model CustomOrder {
    id           String         @id @default(cuid())
    status       OrderStatus    @default(PENDING)
    orderNumber  String         @unique
    totalAmount  Int
    sizes        SizeQuantity[]
    color        String
    material     String // "standard" | "premium"
    logoPosition String?
    logoFile     String?
    notes        String?

    category     Category   @relation(fields: [categoryId], references: [id])
    categoryId   String
    workBranch   WorkBranch @relation(fields: [workBranchId], references: [id])
    workBranchId String
    userId       String
    orderedBy    User       @relation(fields: [userId], references: [id])
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@index([orderNumber])
}

model SizeQuantity {
    id               String          @id @default(cuid())
    size             String
    quantity         Int
    customOrder      CustomOrder?    @relation(fields: [customOrderId], references: [id])
    customOrderId    String?
    customCartItem   CustomCartItem? @relation(fields: [customCartItemId], references: [id])
    customCartItemId String?
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}
